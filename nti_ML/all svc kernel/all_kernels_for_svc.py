# -*- coding: utf-8 -*-
"""all kernels for SVC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ud4x_NYihFb6CfmARNYB7kBsGD5UKxn8
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC

dataset= pd.read_csv('s.csv')

from sklearn.preprocessing import LabelEncoder

lb=LabelEncoder()

dataset['Gender']=lb.fit_transform(dataset['Gender'])

dataset = pd.get_dummies(dataset,columns=['Gender'])

print(dataset)

rows_to_select = [1, 2,4,5]
x = dataset.iloc[:,rows_to_select]
x

y=dataset.iloc[:,-3].values
y

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.30)

sm = StandardScaler()

x_train=sm.fit_transform(x_train)

x_test=sm.transform(x_test)

clas = SVC(kernel='linear',random_state=10)

clas.fit(x_train,y_train)

y_pred=clas.predict(x_test)

from sklearn.metrics import confusion_matrix

cm= confusion_matrix(y_test,y_pred)
print(cm)
ac=0
acv=0
for i in range(20):
  x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.25)
  clas.fit(x_train,y_train)
  y_pred = clas.predict(x_test)
  cm = confusion_matrix(y_test,y_pred)
  ac =((cm[0][0]+cm[1][1])/len(y_test))*100
  print(ac)
  acv+=ac/20

print('the average accuarcy is' ,acv,'%')

from pandas.core.internals.managers import create_block_manager_from_column_arrays
clas = SVC(kernel='rbf',random_state=10)
clas.fit(x_train,y_train)
y_pred=clas.predict(x_test)
cm= confusion_matrix(y_test,y_pred)
print(cm)
ac=0
acv=0
for i in range(20):
  x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.25)
  clas.fit(x_train,y_train)
  y_pred = clas.predict(x_test)
  cm = confusion_matrix(y_test,y_pred)
  ac =((cm[0][0]+cm[1][1])/len(y_test))*100
  print(ac)
  acv+=ac/20

print('the average accuarcy is' ,acv,'%')

clas = SVC(kernel='sigmoid',random_state=10)
clas.fit(x_train,y_train)
y_pred=clas.predict(x_test)
cm= confusion_matrix(y_test,y_pred)
print(cm)
ac=0
acv=0
for i in range(20):
  x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.25)
  clas.fit(x_train,y_train)
  y_pred = clas.predict(x_test)
  cm = confusion_matrix(y_test,y_pred)
  ac =((cm[0][0]+cm[1][1])/len(y_test))*100
  print(ac)
  acv+=ac/20

print('the average accuarcy is' ,acv,'%')

clas = SVC(kernel='poly',random_state=10)
clas.fit(x_train,y_train)
y_pred=clas.predict(x_test)
cm= confusion_matrix(y_test,y_pred)
print(cm)
ac=0
acv=0
for i in range(20):
  x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.25)
  clas.fit(x_train,y_train)
  y_pred = clas.predict(x_test)
  cm = confusion_matrix(y_test,y_pred)
  ac =((cm[0][0]+cm[1][1])/len(y_test))*100
  print(ac)
  acv+=ac/20

print('the average accuarcy is' ,acv,'%')

#DOES NOT WORK


clas = SVC(kernel='precomputed',random_state=10)
clas.fit(x_train,y_train)
y_pred=clas.predict(x_test)
cm= confusion_matrix(y_test,y_pred)
print(cm)
ac=0
acv=0
for i in range(20):
  x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.25)
  clas.fit(x_train,y_train)
  y_pred = clas.predict(x_test)
  cm = confusion_matrix(y_test,y_pred)
  ac =((cm[0][0]+cm[1][1])/len(y_test))*100
  print(ac)
  acv+=ac/20

print('the average accuarcy is' ,acv,'%')