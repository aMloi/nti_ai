# -*- coding: utf-8 -*-
"""flask and pickle

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qkdv3xshYSupriKo0zEnCLD2id82mKbF
"""

pip install Flask

from tensorflow.keras import optimizers, datasets, layers
import tensorflow as tf
import matplotlib.pyplot as plt

((train_x, train_y),(test_x, test_y)) = datasets.cifar10.load_data()

train_x.shape

train_x[0]

train_x=train_x.astype('float32')/255

test_x=test_x.astype('float32')/255

train_y[0]

train_y = tf.keras.utils.to_categorical(train_y)
test_y = tf.keras.utils.to_categorical(test_y)

train_y[0]

train_x.shape

import tensorflow as tf

from tensorflow.keras import activations

model1 = tf.keras.Sequential()
model1.add(layers.Conv2D(filters= 32,kernel_size= 5, strides= 1, padding= 'same',activation= tf.nn.relu, input_shape= (32,32,3)))

model1.add(layers.MaxPool2D(pool_size=(2,2), strides= (2,2), padding= 'valid'))

model1.add(layers.Conv2D(filters= 64,kernel_size= 3, strides= (1,1), padding= 'same',activation= tf.nn.relu))
model1.add(layers.MaxPool2D(pool_size=(2,2), strides= (2,2), padding= 'valid'))

model1.add(layers.Dropout(0.25))
model1.add(layers.Flatten())

model1.add(layers.Dense(units= 128, activation= tf.nn.relu))

model1.add(layers.Dropout(0.5))

model1.add(layers.Dense(units= 10, activation= tf.nn.softmax))

train_x.shape

train_x= train_x.reshape(-1,32,32,3)
test_x= test_x.reshape(-1,32,32,3)
model1.compile(optimizer= 'adam', loss= 'categorical_crossentropy', metrics= ['accuracy'])
history=model1.fit(x= train_x, y= train_y, epochs= 10, batch_size= 128)

print(tf.__version__)

score=model1.evaluate(test_x,test_y , batch_size=None, verbose=1,
               sample_weight=None, steps=None, callbacks=None, max_queue_size=10)

print("the accuracy of the model:",score[1]*100,"%")
print("the loss of the model:",score[0])

import pickle


with open('model.pkl', 'wb') as f:
    pickle.dump(model1, f)





with open('model.pkl', 'rb') as f:
    model2 = pickle.load(f)

# app.py

from flask import Flask, render_template, request, jsonify
from tensorflow.keras.models import load_model
import numpy as np

app = Flask(__name__)
model1 = model2

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    image = np.array(request.json['image'])  # Assuming the image is passed in the request as a JSON object
    image = image.reshape(-1, 32, 32, 3)
    prediction = model1.predict(image)
    class_index = np.argmax(prediction[0])
    classes = ['class1', 'class2', ..., 'class10']  # Replace with actual class names
    predicted_class = classes[class_index]
    return jsonify({'predicted_class': predicted_class})

if __name__ == '__main__':
    app.run()

from flask import Flask, request
from tensorflow.keras.models import load_model
import numpy as np

app = Flask(__name__)
model1 = model2

@app.route('/')
def home():
    return '''
    <h1>CIFAR-10 Classifier</h1>
    <form action="/predict" method="post" enctype="multipart/form-data">
        <input type="file" name="image">
        <input type="submit" value="Predict">
    </form>
    '''

@app.route('/predict', methods=['POST'])
def predict():
    if 'image' not in request.files:
        return "No image file uploaded!"

    image = np.array(request.files['image'].read())
    # You might need to preprocess the image before passing it to the model
    # Example: image = preprocess_image(image)

    image = image.reshape(-1, 32, 32, 3)
    prediction = model1.predict(image)
    class_index = np.argmax(prediction[0])
    classes = ['class1', 'class2', ..., 'class10']  # Replace with actual class names
    predicted_class = classes[class_index]

    return f"The predicted class is: {predicted_class}"

if __name__ == '__main__':
    app.run()

