# -*- coding: utf-8 -*-
"""image_processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13L9CnO0rbBYKB1LzM_iECfYP_0Ed6tYP
"""

import cv2
import numpy as np

print(cv2.__version__)

im=cv2.imread('lena.jpg')

from google.colab.patches import cv2_imshow

cv2_imshow(im)
im.shape

cv2.imwrite('lena_1.jpg',im)

im1=cv2.cvtColor(im,cv2.COLOR_BGR2HSV)
cv2_imshow(im1)

im2=cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)
cv2_imshow(im2)
im2.shape

#a function to shift an image

def translate (img,x,y):
  (h,w)=img.shape[:2]
  m=np.float32([[1,0,x],[0,1,y]])
  shifted = cv2.warpAffine(img,m,(w,h))
  return shifted

shifted = translate(im,50,50)

cv2_imshow(shifted)

#rotate a pic

rotated=cv2.rotate(im,rotateCode=cv2.ROTATE_90_CLOCKWISE)
cv2_imshow(rotated)

#flip a pic

im_flip=cv2.flip(im,1)
cv2_imshow(im)
cv2_imshow(im_flip)

sizee=(300,300)

#average of nearst pixel  -> worse quailty

method1=cv2.INTER_NEAREST

#average of 4 nearst pixels -> better quality

method2=cv2.INTER_LINEAR

zoom1=cv2.resize(im,sizee,interpolation=method1)
zoom2=cv2.resize(im,sizee,interpolation=method2)

cv2_imshow(zoom1)
cv2_imshow(zoom2)

im_equal=cv2.equalizeHist(im1)
cv2_imshow(im3)
cv2_imshow(im_equal)

#equalization for colored photo
blue=im[:,:,0]
green=im[:,:,1]
red=im[:,:,2]
red_equal=cv2.equalizeHist(red)
green_equal=cv2.equalizeHist(green)
blue_equal=cv2.equalizeHist(blue)
total_img=cv2.merge([blue_equal,green_equal,red_equal])

cv2_imshow(total_img)

im_median=cv2.medianBlur(im,3)
cv2_imshow(im_median)

im_blur=cv2.blur(im,(7,7))
cv2_imshow(im_blur)

def apply_sobel_filter(image):
    # Convert the image to grayscale
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Calculate the gradients using Sobel operators
    sobel_x = cv2.Sobel(gray_image, cv2.CV_64F, 1, 0, ksize=3)
    sobel





















